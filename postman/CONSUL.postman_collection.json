{
	"id": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
	"name": "CONSUL",
	"description": "",
	"order": [
		"51091c9c-cc49-32df-257a-82b916a8d97e",
		"13e183d8-7c6f-a06c-a9b1-69ba2cccd4a5",
		"e73e6b57-ebca-3fa7-004b-9d4ff944d853",
		"8bb10f60-b738-6e03-a9f1-56be7efea065",
		"6089a2e4-ac2d-d17e-57b9-0468b3dc5828",
		"53ec549b-9bfe-6f28-a311-e38513caf0f4",
		"337863c1-440a-1f87-d102-428bba8a1805",
		"262dc407-3024-0215-eab0-76ebd0f2ee89",
		"f61b376d-2121-461f-a566-63f2fbac68c3",
		"714504c2-544a-149f-a3e1-47d6d63944da",
		"1b263724-e6a1-4d82-0550-ffdb8b574b40",
		"0ba37139-eda9-acbc-50c1-14aa1d9da57b",
		"4a156a9b-5735-cd61-649b-d423679113d9",
		"b7675e33-f683-3d51-badd-89893fc377f8",
		"1c4cf7b9-0054-d5a1-e94e-310acd6e5f99",
		"4e70a942-3380-af0b-c4a5-8c66953ed8ef",
		"86a7668a-fa96-83c6-32b2-dd9cbe4f49cb",
		"fac24c8a-e8fd-4a7c-1341-90523a385070"
	],
	"folders": [],
	"timestamp": 1463190047371,
	"owner": 0,
	"public": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "0ba37139-eda9-acbc-50c1-14aa1d9da57b",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/health/service/<service>",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296655424,
			"name": "/v1/health/service/<service>",
			"description": "This endpoint is hit with a GET and returns the nodes providing the service indicated on the path. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nAdding the optional \"?near=\" parameter with a node name will sort the node list in ascending order based on the estimated round trip time from that node. Passing \"?near=_agent\" will use the agent's node for the sort.\n\nBy default, all nodes matching the service are returned. The list can be filtered by tag using the \"?tag=\" query parameter.\n\nProviding the \"?passing\" query parameter, added in Consul 0.2, will filter results to only nodes with all checks in the passing state. This can be used to avoid extra filtering logic on the client side.\n\nThis endpoint is very similar to the /v1/catalog/service endpoint; however, this endpoint automatically returns the status of the associated health check as well as any system level health checks. This allows a client to avoid sending traffic to nodes that are failing health tests or reporting warnings.\n\nUsers can also build in support for dynamic load balancing and other features by incorporating the use of health checks.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": {\n      \"Node\": \"foobar\",\n      \"Address\": \"10.1.10.12\",\n      \"TaggedAddresses\": {\n        \"wan\": \"10.1.10.12\"\n      }\n    },\n    \"Service\": {\n      \"ID\": \"redis\",\n      \"Service\": \"redis\",\n      \"Tags\": null,\n      \"Address\": \"10.1.10.12\",\n      \"Port\": 8000\n    },\n    \"Checks\": [\n      {\n        \"Node\": \"foobar\",\n        \"CheckID\": \"service:redis\",\n        \"Name\": \"Service 'redis' check\",\n        \"Status\": \"passing\",\n        \"Notes\": \"\",\n        \"Output\": \"\",\n        \"ServiceID\": \"redis\",\n        \"ServiceName\": \"redis\"\n      },\n      {\n        \"Node\": \"foobar\",\n        \"CheckID\": \"serfHealth\",\n        \"Name\": \"Serf Health Status\",\n        \"Status\": \"passing\",\n        \"Notes\": \"\",\n        \"Output\": \"\",\n        \"ServiceID\": \"\",\n        \"ServiceName\": \"\"\n      }\n    ]\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "13e183d8-7c6f-a06c-a9b1-69ba2cccd4a5",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/deregister",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296615322,
			"name": "/v1/catalog/deregister",
			"description": "The deregister endpoint is a low-level mechanism for directly removing entries from the Catalog. Note: it is usually preferrable instead to use the agent endpoints for deregistration as they are simpler and perform anti-entropy.\n\nThe deregister endpoint expects a JSON request body to be PUT. The request body must look like one of the following:\n\n{\n  \"Datacenter\": \"dc1\",\n  \"Node\": \"foobar\",\n}\n{\n  \"Datacenter\": \"dc1\",\n  \"Node\": \"foobar\",\n  \"CheckID\": \"service:redis1\"\n}\n{\n  \"Datacenter\": \"dc1\",\n  \"Node\": \"foobar\",\n  \"ServiceID\": \"redis1\",\n}\nThe behavior of the endpoint depends on what keys are provided. The endpoint requires Node to be provided while Datacenter will be defaulted to match that of the agent. If only Node is provided, the node and all associated services and checks are deleted. If CheckID is provided, only that check is removed. If ServiceID is provided, the service and its associated health check (if any) are removed.\n\nAn optional ACL token may be provided to perform the deregister action by adding a WriteRequest block to the payload, like this:\n\n{\n  \"WriteRequest\": {\n    \"Token\": \"foo\"\n  }\n}\nIf the API call succeeds a 200 status code is returned.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "1b263724-e6a1-4d82-0550-ffdb8b574b40",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/health/checks/gravity",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296651712,
			"name": "/v1/health/checks/<service>",
			"description": "This endpoint is hit with a GET and returns the checks associated with the service provided on the path. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nAdding the optional \"?near=\" parameter with a node name will sort the node list in ascending order based on the estimated round trip time from that node. Passing \"?near=_agent\" will use the agent's node for the sort.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"service:redis\",\n    \"Name\": \"Service 'redis' check\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"redis\",\n    \"ServiceName\": \"redis\"\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "1c4cf7b9-0054-d5a1-e94e-310acd6e5f99",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500//v1/kv/<key>",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296666376,
			"name": "/v1/kv/<key>",
			"description": "The KV endpoint is used to access Consul's simple key/value store, useful for storing service configuration or other metadata.\n\nIt has only a single endpoint:\n\n/v1/kv/<key>\nThe GET, PUT and DELETE methods are all supported.\n\nBy default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter. It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters. If you are interested in replication between datacenters, look at the Consul Replicate project.\n\nThe KV endpoint supports the use of ACL tokens.\n\nGET Method\n\nWhen using the GET method, Consul will return the specified key. If the \"?recurse\" query parameter is provided, it will return all keys with the given prefix.\n\nThis endpoint supports blocking queries and all consistency modes.\n\nEach object will look like:\n\n[\n  {\n    \"CreateIndex\": 100,\n    \"ModifyIndex\": 200,\n    \"LockIndex\": 200,\n    \"Key\": \"zip\",\n    \"Flags\": 0,\n    \"Value\": \"dGVzdA==\",\n    \"Session\": \"adf4238a-882b-9ddc-4a9d-5b6758e4159e\"\n  }\n]\nCreateIndex is the internal index value that represents when the entry was created.\n\nModifyIndex is the last index that modified this key. This index corresponds to the X-Consul-Index header value that is returned in responses, and it can be used to establish blocking queries by setting the \"?index\" query parameter. You can even perform blocking queries against entire subtrees of the KV store: if \"?recurse\" is provided, the returned X-Consul-Index corresponds to the latest ModifyIndex within the prefix, and a blocking query using that \"?index\" will wait until any key within that prefix is updated.\n\nLockIndex is the number of times this key has successfully been acquired in a lock. If the lock is held, the Session key provides the session that owns the lock.\n\nKey is simply the full path of the entry.\n\nFlags are an opaque unsigned integer that can be attached to each entry. Clients can choose to use this however makes sense for their application.\n\nValue is a Base64-encoded blob of data. Note that values cannot be larger than 512kB.\n\nIt is possible to list just keys without their values by using the \"?keys\" query parameter. This will return a list of the keys under the given prefix. The optional \"?separator=\" can be used to list only up to a given separator.\n\nFor example, listing \"/web/\" with a \"/\" separator may return:\n\n[\n  \"/web/bar\",\n  \"/web/foo\",\n  \"/web/subdir/\"\n]\nUsing the key listing method may be suitable when you do not need the values or flags or want to implement a key-space explorer.\n\nIf the \"?raw\" query parameter is used with a non-recursive GET, the response is just the raw value of the key, without any encoding.\n\nIf no entries are found, a 404 code is returned.\n\nPUT method\n\nWhen using the PUT method, Consul expects the request body to be the value corresponding to the key. There are a number of query parameters that can be used with a PUT request:\n\n?flags=<num> : This can be used to specify an unsigned value between 0 and (264)-1. Clients can choose to use this however makes sense for their application.\n\n?cas=<index> : This flag is used to turn the PUT into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. If the index is 0, Consul will only put the key if it does not already exist. If the index is non-zero, the key is only set if the index matches the ModifyIndex of that key.\n\n?acquire=<session> : This flag is used to turn the PUT into a lock acquisition operation. This is useful as it allows leader election to be built on top of Consul. If the lock is not held and the session is valid, this increments the LockIndex and sets the Session value of the key in addition to updating the key contents. A key does not need to exist to be acquired. If the lock is already held by the given session, then the LockIndex is not incremented but the key contents are updated. This lets the current lock holder update the key contents without having to give up the lock and reacquire it.\n\n?release=<session> : This flag is used to turn the PUT into a lock release operation. This is useful when paired with \"?acquire=\" as it allows clients to yield a lock. This will leave the LockIndex unmodified but will clear the associated Session of the key. The key must be held by this session to be unlocked.\n\nThe return value is either true or false. If false is returned, the update has not taken place.\n\nDELETE method\n\nThe DELETE method can be used to delete a single key or all keys sharing a prefix. There are a few query parameters that can be used with a DELETE request:\n\n?recurse : This is used to delete all keys which have the specified prefix. Without this, only a key with an exact match will be deleted.\n\n?cas=<index> : This flag is used to turn the DELETE into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. Unlike PUT, the index must be greater than 0 for Consul to take any action: a 0 index will not delete the key. If the index is non-zero, the key is only deleted if the index matches the ModifyIndex of that key.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "262dc407-3024-0215-eab0-76ebd0f2ee89",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/event/fire/<name>",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296637876,
			"name": "/v1/event/fire/<name>",
			"description": "The fire endpoint is used to trigger a new user event. A user event needs a name, provided on the path. The endpoint also supports several optional parameters on the query string.\n\nBy default, the agent's local datacenter is used, but another datacenter can be specified using the \"?dc=\" query parameter.\n\nThe fire endpoint expects a PUT request with an optional body. The body contents are opaque to Consul and become the \"payload\" of the event. Names starting with the \"_\" prefix should be considered reserved for Consul's internal use.\n\nThe ?node=, ?service=, and ?tag= query parameters may optionally be provided. They respectively provide a regular expression to filter by node name, service, and service tags.\n\nThe return code is 200 on success, along with a body like:\n\n{\n  \"ID\": \"b54fe110-7af5-cafc-d1fb-afc8ba432b1c\",\n  \"Name\": \"deploy\",\n  \"Payload\": null,\n  \"NodeFilter\": \"\",\n  \"ServiceFilter\": \"\",\n  \"TagFilter\": \"\",\n  \"Version\": 1,\n  \"LTime\": 0\n}\nThe ID field uniquely identifies the newly fired event.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "337863c1-440a-1f87-d102-428bba8a1805",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/node/consul-client-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296633892,
			"name": "/v1/catalog/node/<node>",
			"description": "This endpoint is hit with a GET and returns the node's registered services. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter. The node being queried must be provided on the path.\n\nIt returns a JSON body like this:\n\n{\n  \"Node\": {\n    \"Node\": \"foobar\",\n    \"Address\": \"10.1.10.12\",\n    \"TaggedAddresses\": {\n      \"wan\": \"10.1.10.12\"\n    }\n  },\n  \"Services\": {\n    \"consul\": {\n      \"ID\": \"consul\",\n      \"Service\": \"consul\",\n      \"Tags\": null,\n      \"Port\": 8300\n    },\n    \"redis\": {\n      \"ID\": \"redis\",\n      \"Service\": \"redis\",\n      \"Tags\": [\n        \"v1\"\n      ],\n      \"Port\": 8000\n    }\n  }\n}\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "4a156a9b-5735-cd61-649b-d423679113d9",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/health/state/any",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296658846,
			"name": "/v1/health/state/<state>",
			"description": "This endpoint is hit with a GET and returns the checks in the state provided on the path. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nAdding the optional \"?near=\" parameter with a node name will sort the node list in ascending order based on the estimated round trip time from that node. Passing \"?near=_agent\" will use the agent's node for the sort.\n\nThe supported states are any, unknown, passing, warning, or critical. The any state is a wildcard that can be used to return all checks.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"serfHealth\",\n    \"Name\": \"Serf Health Status\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"\",\n    \"ServiceName\": \"\"\n  },\n  {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"service:redis\",\n    \"Name\": \"Service 'redis' check\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"redis\",\n    \"ServiceName\": \"redis\"\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "4e70a942-3380-af0b-c4a5-8c66953ed8ef",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500//v1/kv/<key>",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296670572,
			"name": "/v1/kv/<key>",
			"description": "The KV endpoint is used to access Consul's simple key/value store, useful for storing service configuration or other metadata.\n\nIt has only a single endpoint:\n\n/v1/kv/<key>\nThe GET, PUT and DELETE methods are all supported.\n\nBy default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter. It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters. If you are interested in replication between datacenters, look at the Consul Replicate project.\n\nThe KV endpoint supports the use of ACL tokens.\n\nGET Method\n\nWhen using the GET method, Consul will return the specified key. If the \"?recurse\" query parameter is provided, it will return all keys with the given prefix.\n\nThis endpoint supports blocking queries and all consistency modes.\n\nEach object will look like:\n\n[\n  {\n    \"CreateIndex\": 100,\n    \"ModifyIndex\": 200,\n    \"LockIndex\": 200,\n    \"Key\": \"zip\",\n    \"Flags\": 0,\n    \"Value\": \"dGVzdA==\",\n    \"Session\": \"adf4238a-882b-9ddc-4a9d-5b6758e4159e\"\n  }\n]\nCreateIndex is the internal index value that represents when the entry was created.\n\nModifyIndex is the last index that modified this key. This index corresponds to the X-Consul-Index header value that is returned in responses, and it can be used to establish blocking queries by setting the \"?index\" query parameter. You can even perform blocking queries against entire subtrees of the KV store: if \"?recurse\" is provided, the returned X-Consul-Index corresponds to the latest ModifyIndex within the prefix, and a blocking query using that \"?index\" will wait until any key within that prefix is updated.\n\nLockIndex is the number of times this key has successfully been acquired in a lock. If the lock is held, the Session key provides the session that owns the lock.\n\nKey is simply the full path of the entry.\n\nFlags are an opaque unsigned integer that can be attached to each entry. Clients can choose to use this however makes sense for their application.\n\nValue is a Base64-encoded blob of data. Note that values cannot be larger than 512kB.\n\nIt is possible to list just keys without their values by using the \"?keys\" query parameter. This will return a list of the keys under the given prefix. The optional \"?separator=\" can be used to list only up to a given separator.\n\nFor example, listing \"/web/\" with a \"/\" separator may return:\n\n[\n  \"/web/bar\",\n  \"/web/foo\",\n  \"/web/subdir/\"\n]\nUsing the key listing method may be suitable when you do not need the values or flags or want to implement a key-space explorer.\n\nIf the \"?raw\" query parameter is used with a non-recursive GET, the response is just the raw value of the key, without any encoding.\n\nIf no entries are found, a 404 code is returned.\n\nPUT method\n\nWhen using the PUT method, Consul expects the request body to be the value corresponding to the key. There are a number of query parameters that can be used with a PUT request:\n\n?flags=<num> : This can be used to specify an unsigned value between 0 and (264)-1. Clients can choose to use this however makes sense for their application.\n\n?cas=<index> : This flag is used to turn the PUT into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. If the index is 0, Consul will only put the key if it does not already exist. If the index is non-zero, the key is only set if the index matches the ModifyIndex of that key.\n\n?acquire=<session> : This flag is used to turn the PUT into a lock acquisition operation. This is useful as it allows leader election to be built on top of Consul. If the lock is not held and the session is valid, this increments the LockIndex and sets the Session value of the key in addition to updating the key contents. A key does not need to exist to be acquired. If the lock is already held by the given session, then the LockIndex is not incremented but the key contents are updated. This lets the current lock holder update the key contents without having to give up the lock and reacquire it.\n\n?release=<session> : This flag is used to turn the PUT into a lock release operation. This is useful when paired with \"?acquire=\" as it allows clients to yield a lock. This will leave the LockIndex unmodified but will clear the associated Session of the key. The key must be held by this session to be unlocked.\n\nThe return value is either true or false. If false is returned, the update has not taken place.\n\nDELETE method\n\nThe DELETE method can be used to delete a single key or all keys sharing a prefix. There are a few query parameters that can be used with a DELETE request:\n\n?recurse : This is used to delete all keys which have the specified prefix. Without this, only a key with an exact match will be deleted.\n\n?cas=<index> : This flag is used to turn the DELETE into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. Unlike PUT, the index must be greater than 0 for Consul to take any action: a 0 index will not delete the key. If the index is non-zero, the key is only deleted if the index matches the ModifyIndex of that key.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "51091c9c-cc49-32df-257a-82b916a8d97e",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/register",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296611394,
			"name": "/v1/catalog/register",
			"description": "The register endpoint is a low-level mechanism for registering or updating entries in the catalog. Note: it is usually preferrable instead to use the agent endpoints for registration as they are simpler and perform anti-entropy.\n\nThe register endpoint expects a JSON request body to be PUT. \n\nThe request body must look something like:\n\n{\n  \"Datacenter\": \"dc1\",\n  \"Node\": \"foobar\",\n  \"Address\": \"192.168.10.10\",\n  \"Service\": {\n    \"ID\": \"redis1\",\n    \"Service\": \"redis\",\n    \"Tags\": [\n      \"master\",\n      \"v1\"\n    ],\n    \"Address\": \"127.0.0.1\",\n    \"TaggedAddresses\": {\n      \"wan\": \"127.0.0.1\"\n    },\n    \"Port\": 8000\n  },\n  \"Check\": {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"service:redis1\",\n    \"Name\": \"Redis health check\",\n    \"Notes\": \"Script based health check\",\n    \"Status\": \"passing\",\n    \"ServiceID\": \"redis1\"\n  }\n}\n\nThe behavior of the endpoint depends on what keys are provided. The endpoint requires Node and Address to be provided while Datacenter will be defaulted to match that of the agent. If only those are provided, the endpoint will register the node with the catalog. TaggedAddresses can be used in conjunction with the translate_wan_addrs configuration option. Currently only the \"wan\" tag is supported.\n\nIf the Service key is provided, the service will also be registered. If ID is not provided, it will be defaulted to the value of the Service.Service property. Only one service with a given ID may be present per node. The service Tags, Address, and Port fields are all optional.\n\nIf the Check key is provided, a health check will also be registered. Note: this register API manipulates the health check entry in the Catalog, but it does not setup the script, TTL, or HTTP check to monitor the node's health. To truly enable a new health check, the check must either be provided in agent configuration or set via the agent endpoint.\n\nThe CheckID can be omitted and will default to the value of Name. As with Service.ID, the CheckID must be unique on this node. Notes is an opaque field that is meant to hold human-readable text. If a ServiceID is provided that matches the ID of a service on that node, the check is treated as a service level health check, instead of a node level health check. The Status must be one of unknown, passing, warning, or critical. The unknown status is used to indicate that the initial check has not been performed yet.\n\nIt is important to note that Check does not have to be provided with Service and vice versa. A catalog entry can have either, neither, or both.\n\nAn optional ACL token may be provided to perform the registration by including a WriteRequest block in the query payload, like this:\n\n{\n  \"WriteRequest\": {\n    \"Token\": \"foo\"\n  }\n}\n\nIf the API call succeeds, a 200 status code is returned.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "53ec549b-9bfe-6f28-a311-e38513caf0f4",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/service/gravity",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296630064,
			"name": "/v1/catalog/service/<service>",
			"description": "This endpoint is hit with a GET and returns the nodes providing a service in a given DC. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nThe service being queried must be provided on the path. By default all nodes in that service are returned. However, the list can be filtered by tag using the \"?tag=\" query parameter.\n\nAdding the optional \"?near=\" parameter with a node name will sort the node list in ascending order based on the estimated round trip time from that node. Passing \"?near=_agent\" will use the agent's node for the sort.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"foobar\",\n    \"Address\": \"10.1.10.12\",\n    \"ServiceID\": \"redis\",\n    \"ServiceName\": \"redis\",\n    \"ServiceTags\": null,\n    \"ServiceAddress\": \"\",\n    \"ServicePort\": 8000\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "6089a2e4-ac2d-d17e-57b9-0468b3dc5828",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/services",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296626135,
			"name": "/v1/catalog/services",
			"description": "This endpoint is hit with a GET and returns the services registered in a given DC. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nIt returns a JSON body like this:\n\n{\n  \"consul\": [],\n  \"redis\": [],\n  \"postgresql\": [\n    \"master\",\n    \"slave\"\n  ]\n}\nThe keys are the service names, and the array values provide all known tags for a given service.\n\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "714504c2-544a-149f-a3e1-47d6d63944da",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/health/node/consul-client-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296646204,
			"name": "/v1/health/node/<node>",
			"description": "This endpoint is hit with a GET and returns the checks specific to the node provided on the path. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"serfHealth\",\n    \"Name\": \"Serf Health Status\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"\",\n    \"ServiceName\": \"\"\n  },\n  {\n    \"Node\": \"foobar\",\n    \"CheckID\": \"service:redis\",\n    \"Name\": \"Service 'redis' check\",\n    \"Status\": \"passing\",\n    \"Notes\": \"\",\n    \"Output\": \"\",\n    \"ServiceID\": \"redis\",\n    \"ServiceName\": \"redis\"\n  }\n]\nIn this case, we can see there is a system level check (that is, a check with no associated ServiceID) as well as a service check for Redis. The \"serfHealth\" check is special in that it is automatically present on every node. When a node joins the Consul cluster, it is part of a distributed failure detection provided by Serf. If a node fails, it is detected and the status is automatically changed to critical.\n\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "86a7668a-fa96-83c6-32b2-dd9cbe4f49cb",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/coordinate/datacenters",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296675642,
			"name": "/v1/coordinate/datacenters",
			"description": "This endpoint is hit with a GET and returns the WAN network coordinates for all Consul servers, organized by DCs.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Datacenter\": \"dc1\",\n    \"Coordinates\": [\n      {\n        \"Node\": \"agent-one\",\n        \"Coord\": {\n          \"Adjustment\": 0,\n          \"Error\": 1.5,\n          \"Height\": 0,\n          \"Vec\": [0,0,0,0,0,0,0,0]\n        }\n      }\n    ]\n  }\n]\nThis endpoint serves data out of the server's local Serf data about the WAN, so its results may vary as requests are handled by different servers in the cluster. Also, it does not support blocking queries or any consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "8bb10f60-b738-6e03-a9f1-56be7efea065",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/nodes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296622534,
			"name": "/v1/catalog/nodes",
			"description": "This endpoint is hit with a GET and returns the nodes registered in a given DC. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nAdding the optional \"?near=\" parameter with a node name will sort the node list in ascending order based on the estimated round trip time from that node. Passing \"?near=_agent\" will use the agent's node for the sort.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"baz\",\n    \"Address\": \"10.1.10.11\"\n    \"TaggedAddresses\": {\n      \"wan\": \"10.1.10.11\"\n    }\n  },\n  {\n    \"Node\": \"foobar\",\n    \"Address\": \"10.1.10.12\",\n    \"TaggedAddresses\": {\n      \"wan\": \"10.1.10.12\"\n    }\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "b7675e33-f683-3d51-badd-89893fc377f8",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500//v1/kv/<key>",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296662282,
			"name": "/v1/kv/<key>",
			"description": "The KV endpoint is used to access Consul's simple key/value store, useful for storing service configuration or other metadata.\n\nIt has only a single endpoint:\n\n/v1/kv/<key>\nThe GET, PUT and DELETE methods are all supported.\n\nBy default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter. It is important to note that each datacenter has its own KV store, and there is no built-in replication between datacenters. If you are interested in replication between datacenters, look at the Consul Replicate project.\n\nThe KV endpoint supports the use of ACL tokens.\n\nGET Method\n\nWhen using the GET method, Consul will return the specified key. If the \"?recurse\" query parameter is provided, it will return all keys with the given prefix.\n\nThis endpoint supports blocking queries and all consistency modes.\n\nEach object will look like:\n\n[\n  {\n    \"CreateIndex\": 100,\n    \"ModifyIndex\": 200,\n    \"LockIndex\": 200,\n    \"Key\": \"zip\",\n    \"Flags\": 0,\n    \"Value\": \"dGVzdA==\",\n    \"Session\": \"adf4238a-882b-9ddc-4a9d-5b6758e4159e\"\n  }\n]\nCreateIndex is the internal index value that represents when the entry was created.\n\nModifyIndex is the last index that modified this key. This index corresponds to the X-Consul-Index header value that is returned in responses, and it can be used to establish blocking queries by setting the \"?index\" query parameter. You can even perform blocking queries against entire subtrees of the KV store: if \"?recurse\" is provided, the returned X-Consul-Index corresponds to the latest ModifyIndex within the prefix, and a blocking query using that \"?index\" will wait until any key within that prefix is updated.\n\nLockIndex is the number of times this key has successfully been acquired in a lock. If the lock is held, the Session key provides the session that owns the lock.\n\nKey is simply the full path of the entry.\n\nFlags are an opaque unsigned integer that can be attached to each entry. Clients can choose to use this however makes sense for their application.\n\nValue is a Base64-encoded blob of data. Note that values cannot be larger than 512kB.\n\nIt is possible to list just keys without their values by using the \"?keys\" query parameter. This will return a list of the keys under the given prefix. The optional \"?separator=\" can be used to list only up to a given separator.\n\nFor example, listing \"/web/\" with a \"/\" separator may return:\n\n[\n  \"/web/bar\",\n  \"/web/foo\",\n  \"/web/subdir/\"\n]\nUsing the key listing method may be suitable when you do not need the values or flags or want to implement a key-space explorer.\n\nIf the \"?raw\" query parameter is used with a non-recursive GET, the response is just the raw value of the key, without any encoding.\n\nIf no entries are found, a 404 code is returned.\n\nPUT method\n\nWhen using the PUT method, Consul expects the request body to be the value corresponding to the key. There are a number of query parameters that can be used with a PUT request:\n\n?flags=<num> : This can be used to specify an unsigned value between 0 and (264)-1. Clients can choose to use this however makes sense for their application.\n\n?cas=<index> : This flag is used to turn the PUT into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. If the index is 0, Consul will only put the key if it does not already exist. If the index is non-zero, the key is only set if the index matches the ModifyIndex of that key.\n\n?acquire=<session> : This flag is used to turn the PUT into a lock acquisition operation. This is useful as it allows leader election to be built on top of Consul. If the lock is not held and the session is valid, this increments the LockIndex and sets the Session value of the key in addition to updating the key contents. A key does not need to exist to be acquired. If the lock is already held by the given session, then the LockIndex is not incremented but the key contents are updated. This lets the current lock holder update the key contents without having to give up the lock and reacquire it.\n\n?release=<session> : This flag is used to turn the PUT into a lock release operation. This is useful when paired with \"?acquire=\" as it allows clients to yield a lock. This will leave the LockIndex unmodified but will clear the associated Session of the key. The key must be held by this session to be unlocked.\n\nThe return value is either true or false. If false is returned, the update has not taken place.\n\nDELETE method\n\nThe DELETE method can be used to delete a single key or all keys sharing a prefix. There are a few query parameters that can be used with a DELETE request:\n\n?recurse : This is used to delete all keys which have the specified prefix. Without this, only a key with an exact match will be deleted.\n\n?cas=<index> : This flag is used to turn the DELETE into a Check-And-Set operation. This is very useful as a building block for more complex synchronization primitives. Unlike PUT, the index must be greater than 0 for Consul to take any action: a 0 index will not delete the key. If the index is non-zero, the key is only deleted if the index matches the ModifyIndex of that key.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "e73e6b57-ebca-3fa7-004b-9d4ff944d853",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/catalog/datacenters",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296619260,
			"name": "/v1/catalog/datacenters",
			"description": "This endpoint is hit with a GET and is used to return all the datacenters that are known by the Consul server.\n\nThe datacenters will be sorted in ascending order based on the estimated median round trip time from the server to the servers in that datacenter.\n\nIt returns a JSON body like this:\n\n[\"dc1\", \"dc2\"]\nThis endpoint does not require a cluster leader and will succeed even during an availability outage. Therefore, it can be used as a simple check to see if any Consul servers are routable.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "f61b376d-2121-461f-a566-63f2fbac68c3",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/event/list",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296641753,
			"name": "/v1/event/list",
			"description": "This endpoint is hit with a GET and returns the most recent events known by the agent. As a consequence of how the event command works, each agent may have a different view of the events. Events are broadcast using the gossip protocol, so they have no global ordering nor do they make a promise of delivery.\n\nAdditionally, each node applies the node, service and tag filters locally before storing the event. This means the events at each agent may be different depending on their configuration.\n\nThis endpoint allows for filtering on events by name by providing the ?name= query parameter.\n\nTo support watches, this endpoint supports blocking queries. However, the semantics of this endpoint are slightly different. Most blocking queries provide a monotonic index and block until a newer index is available. This can be supported as a consequence of the total ordering of the consensus protocol. With gossip, there is no ordering, and instead X-Consul-Index maps to the newest event that matches the query.\n\nIn practice, this means the index is only useful when used against a single agent and has no meaning globally. Because Consul defines the index as being opaque, clients should not be expecting a natural ordering either.\n\nAgents only buffer the most recent entries. The current buffer size is 256, but this value could change in the future.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"ID\": \"b54fe110-7af5-cafc-d1fb-afc8ba432b1c\",\n    \"Name\": \"deploy\",\n    \"Payload\": \"MTYwOTAzMA==\",\n    \"NodeFilter\": \"\",\n    \"ServiceFilter\": \"\",\n    \"TagFilter\": \"\",\n    \"Version\": 1,\n    \"LTime\": 19\n  },\n  ...\n]",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		},
		{
			"id": "fac24c8a-e8fd-4a7c-1341-90523a385070",
			"headers": "Content-Type: application/json\n",
			"url": "http://{{host}}:8500/v1/coordinate/nodes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1467296679588,
			"name": "/v1/coordinate/nodes",
			"description": "This endpoint is hit with a GET and returns the LAN network coordinates for all nodes in a given DC. By default, the datacenter of the agent is queried; however, the dc can be provided using the \"?dc=\" query parameter.\n\nIt returns a JSON body like this:\n\n[\n  {\n    \"Node\": \"agent-one\",\n    \"Coord\": {\n      \"Adjustment\": 0,\n      \"Error\": 1.5,\n      \"Height\": 0,\n      \"Vec\": [0,0,0,0,0,0,0,0]\n    }\n  }\n]\nThis endpoint supports blocking queries and all consistency modes.",
			"collectionId": "77aa8a46-88dd-0f1c-03d0-2da300a88d88",
			"responses": []
		}
	]
}